a <- coldStartPlot(local.time, em.co, data=pems.1, engine.on=30); a
a <- coldStartPlot(local.time, em.co, data=pems.1, engine.on=30, plot.type=2); a
a <- coldStartPlot(local.time, em.co, data=pems.1, engine.on=30, plot.type=2); a
devtools::unload()
coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30, plot.type=2)
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30, plot.type=2)
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::coldStartPlot(local.time, em.co, data=pems.1, engine.on=30)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::check()
?coldStartPlot
devtools::load_all()
?coldStartPlot
?VSPBinPlot
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
vsp <- calcVSP(velocity, time = local.time, data = pems.1, output="pems")
vsp <- pems.utils::calcVSP(velocity, time = local.time, data = pems.utils::pems.1, output="pems")
vsp
vsp <- pems.utils::calcEm(conc.co2, data = pems.utils::pems.1, output="pems")
pems.utils::VSPPlot(vsp, em.co2, data=vsp)
vsp <- pems.utils::calcVSP(velocity, time = local.time, data = vsp, output="pems")
pems.utils::VSPPlot(vsp, em.co2, data=vsp)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=1)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
pems.utils::VSPBinPlot(vsp, em.co2, data=vsp)
vsp$vspbin <- pems.utils::refVSPBin(vsp, data=vsp)
pems.utils::VSPBinPlot(vsp, em.co2, data=vsp)
pems.utils::VSPBinPlot(vspbin, em.co2, data=vsp)
pems.utils::VSPBinPlot(vspbin, em.co2, data=vsp, plot.type=2)
units
units(pems.utils::pems.1)
class(pems.utils::pems.1)
summaryReport(velocity, local.time, data=pems.1)
pems.utils::summaryReport(velocity, local.time, data=vsp)
pems.utils::summaryReport
pems.utils::correctBaseline(conc.co, data=vsp)
?pems.utils::correctBaseline
pems.utils::correctBaseline
pems.utils::correctBaseline(conc.co, data=vsp, output="all")
pems.utils::correctBaseline(conc.co2, data=vsp, output="all")
pems.utils::correctBaseline(conc.nox, data=vsp, output="all")
vsp <- pems.utils::calcEm(conc.nox, data=vsp)
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp)
vsp <- pems.utils::calcEm(conc.nox, data=pems.utils::pems.1)
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp)
vsp <- pems.utils::calcEm(conc.nox, data=vsp, output="pems")
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp)
vsp <- pems.utils::calcEm(conc.nox, data=pems.utils::pems.1, output="pems")
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp)
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp, engine.on = 30)
pems.utils::coldStartPlot(em.nox, time=local.time, data=vsp, engine.on = 30, plot.type=2)
vsp <- pems.utils::calcEm(conc.nox, data=pems.utils::pems.1)
vsp <- pems.utils::calcVSP(velocity, time = local.time, data = pems.utils::pems.1, output="pems")
vsp <- pems.utils::calcEm(conc.co2, data = vsp, output="pems")
pems.utils::VSPPlot(vsp, em.nox, data=vsp)
pems.utils::VSPPlot(vsp, em.co2, data=vsp)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2, stat=mean)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2, stat=mean)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.2.tar.gz", repos = NULL, type = "source")
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2, stat=max)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=1)
pems.utils::VSPPlot(vsp, em.co2, data=vsp, plot.type=2)
pems.utils::VSPPlot(vsp, data=vsp, plot.type=2)
pems.1 <- pems.utils::pems.1
pems.1$vsp <- pems.utils::calcVSP(velocity, time = local.time, data = pems.1)
pems.1$vspbin <- pems.utils::refVSPBin(vsp, data=pems.1)
pems.1$em.co2 <- pems.utils::calcEm(conc.co2, data = pems.1)
pems.1 <- pems.utils::cAlign(vsp~em.co2, pems.1, output="pems")
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, break.point = TRUE,
break.point.col="red")
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=2)
pems.utils::VSPBinPlot(vspbin, data=pems.1, plot.type=2)
pems.utils::VSPBinPlot(vspbin, data=pems.1, plot.type=2, stat=max)
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=2)
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=1)
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=1, stat=max)
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=1, stat=function(x)max(x,na.rm=TRUE))
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=2, stat=function(x)max(x,na.rm=TRUE))
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2, breaks=(-6:6)*10)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2, breaks=(-5:5)*10)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2, breaks=(-5:6)*10)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2, breaks=(-6:5)*10)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2, breaks=(-7:5)*10)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2)
pems.utils::VSPBinPlot(vsp, em.co2, data = pems.1, plot.type=2)
pems.utils::VSPBinPlot(cut(vsp, breaks==(-5:5)*10), em.co2, data = pems.1, plot.type=2)
pems.utils::VSPBinPlot(vsp, em.co2, data = pems.1, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=2)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T, break.point.col="red")
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, loess=T, loess.col="red")
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T, break.point.col="red")
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T, break.point.col="red", break.point.err=FALSE)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T, break.point.col="red", break.point.se.err=FALSE)
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, plot.type=1, break.point=T, break.point.col="red", break.point.border=FALSE)
pems.utils::VSPBinPlot(vspbin, em.co2, data=pems.1, plot.type=2, stat=function(x)max(x,na.rm=TRUE))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=2, stat=function(x)max(x,na.rm=TRUE))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=2, stat=function(x)mean(x,na.rm=TRUE))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1)
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=list(col="red"))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points.col="red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=list(col="red"))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE, break.points.col=list(col="green"))
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE, break.points.col="green")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE, break.points.col="green")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE)
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE, break.points.col="red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=TRUE, bt.col="red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.points=list(col="red"))
pems.utils::VSPPlot(vsp, em.co2, data = pems.1, break.point = TRUE,
break.point.col="red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.point.col"red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.point.col="red")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.point.col="blue")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.point="blue")
pems.utils::VSPPlot(vsp, em.co2, data=pems.1, plot.type=1, break.point="blue")
cut(pems.1$vsp)
cut(pems.1$vsp, breaks=(-5:5)*10)
pems.1$my.ref <- cut(pems.1$vsp, breaks=(-5:5)*10)
pems.utils::VSPBinPlot(my.ref, data=pems.1)
pems.utils::VSPBinPlot(my.ref, em.co2, data=pems.1)
pems.utils::VSPBinPlot(my.ref, em.co2, data=pems.1, stat=function(x)median(x, na.rm=TRUE))
pems.utils::VSPBinPlot(my.ref, data=pems.1, stat=function(x)median(x, na.rm=TRUE))
pems.1$vsp <- pems.utils::calcVSP(velocity, time = local.time, data = pems.1)
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.3.tar.gz", repos = NULL, type = "source")
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.3.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.4.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.4.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::load_all()
exportPEMS2CSV(pems.1, "pems.1.data.csv", units="add.to.names")
pems.1b <- importCSV2PEMS("pems.1.data.csv", units="get.from.names")
pems.1b
devtools::load_all()
pems.1b <- importCSV2PEMS("pems.1.data.csv", units="get.from.names")
devtools::load_all()
pems.1b <- importCSV2PEMS("pems.1.data.csv", units="get.from.names")
pems.1b
devtools::load_all()
pems.1b <- importCSV2PEMS("pems.1.data.csv", units="get.from.names")
devtools::load_all()
pems.1b <- importCSV2PEMS("pems.1.data.csv", units="get.from.names")
pems.1b
pems.1b$time.stamp
pems.1b$local.time
devtools::unload()
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.4.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.4.tar.gz", repos = NULL, type = "source")
devtools::unload()
devtools::check()
grey.area::splat_date()
grey.area::splat_version(increase="0.0.0.1")
grey.area::splat_version
devtools::build()
devtools::unload()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::build()
devtools::load_all()
?pems.plots
a <- calcAccel(velocity, local.time, data = pems.1, output="pems")
devtools::load_all()
a <- calcAccel(velocity, local.time, data = pems.1, output="pems")
pemsPlot(local.time, velocity, data=pems.1, type="l")
WatsonPlot(velocity, accel, data=a)
WatsonPlot(velocity, accel, data=a, plot.type=1)
WatsonPlot(velocity, accel, data=a, plot.type=2)
WatsonPlot(velocity, accel, data=a, plot.type=3)
WatsonPlot(velocity, accel, data=a, plot.type=4)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build(0
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
require(pems.utils)
?pems.plots
a <- calcAccel(velocity, local.time, data = pems.1, output="pems")
pemsPlot(local.time, velocity, data=pems.1, type="l")
atsonPlot(velocity, accel, data=a)
WatsonPlot(velocity, accel, data=a)
atsonPlot(velocity, accel, data=a, omit.stopped="points")
WatsonPlot(velocity, accel, data=a, omit.stopped="points")
WatsonPlot(velocity, accel, data=a, plot.type=1)
WatsonPlot(velocity, accel, data=a, plot.type=2)
WatsonPlot(velocity, accel, data=a, plot.type=3)
WatsonPlot(velocity, accel, data=a, plot.type=4)
XYZPlot(~accel*velocity, data=a)
latticePlot(velocity~local.time, data = pems.1, type = "l")
xyplot(velocity~local.time, data = pems.1, type = "l")
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
require(pems.utils)
examples(pemsPlot)
example(pemsPlot)
WatsonPlot(velocity, accel, data=a, omit.stopped="points")
WatsonPlot(velocity, accel, data=a, omit.stopped="cells")
WatsonPlot(velocity, accel, data=a, plot.type=1)
WatsonPlot(velocity, accel, data=a, plot.type=2)
WatsonPlot(velocity, accel, data=a, plot.type=3)
WatsonPlot(velocity, accel, data=a, plot.type=4)
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
cbind
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::check()
usethis::edit_r_makevars()
symbols <- readRDS("~/pkg/pems.utils/pems.utils/src/symbols.rds")
symbols
edir(symbols)
edit(symbols)
?Rcpp::compileAttributes
Rcpp::wrap
?rcpp
?Rcpp
Rcpp:::method_wrapper
Rcpp::compileAttributes()
devtools::load_all()
devt
``
devtools::load_all()
devtools::load_all()
compileAttributes()
Rcpp::compileAttributes()
devtools::load_all()
devtools::load_all()
Rcpp::compileAttributes()
devtools::load_all()
devtools::load_all()
devtools::load_all()
?data.table::frollapply
Rcpp::Rcpp.package.skeleton("pems.utils")
devtools::load_all()
devtools::load_all()
.Last.error
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
devtools::unload()
devtools::load_all()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.5.tar.gz", repos = NULL, type = "source")
readLines(“~/.Rprofile”)
readLines("~/.Rprofile")
Rcpp::compileAttributes()
devtools::unload()
devtools::load_all()
Rcpp::compileAttributes()
devtools::load_all()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
devtools::load_all()
?merge.pems
p1 <- pems.1[101:200, 1:5]
p2 <- pems.1[103:350, 1:3]
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[103:950, 1:3]
ans <- cAlign(~conc.co, p1, p2)
ans <- pems.utils::cAlign(~conc.co, p1, p2)
devtools::check()
cAlign.old(~conc.co, p1, p2)
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[43:950, 1:3]
cAlign.old(~conc.co, p1, p2)
cAlign.old(~conc.co, p1, p2, output=c("plot", "pems"))
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[3:950, 1:3]
cAlign.old(~conc.co, p1, p2, output=c("plot", "pems"))
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[13:950, 1:3]
cAlign.old(~conc.co, p1, p2, output=c("plot", "pems"))
cAlign.old(~conc.co, p1, p2, output=c("outset","plot", "pems"))
cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[24:950, 1:3]
cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[44:950, 1:3]
cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[50:950, 1:3]
cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
ans <- cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$conc.co, ans$conc.co.1)
p1 <- pems.1[101:880, 1:5]
p2 <- pems.1[13:950, 1:3]
ans <- cAlign.old(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$conc.co, ans$conc.co.1)
devtools::unload_all()
devtools::load_all()
devtools::unload_all()
devtools::load_all()
install.packages("devtools")
install.packages("devtools")
devt
devtools::check()
devtools::load_all()
devtools::check()
Rcpp::sourceCpp("C_ylagxCOR.cpp")
?Rcpp::sourceCpp
Rcpp::sourceCpp(file.choose())
file.choose()
Rcpp::sourceCpp("C:\\Users\\trakradmin\\OneDrive - University of Leeds\\Documents\\pkg\\pems.utils\\pems.utils\\src\\C_ylagxCOR.cpp")
devtools::load_all()
devtools::load_all()
Rcpp::evalCpp()
Rcpp::evalCpp(file.choose())
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::load()
devtools::load_all()
devtools::load()
devtools::load_all()
?merge.pems
p1 <- pems.1[101:200, 1:5]
p2 <- pems.1[103:350, 1:3]
cAlign(~conc.co, p1, p2)
devtools::load_all()
cAlign(~conc.co, p1, p2)
ans <- cAlign(~conc.co, p1, p2)
data.table::frollapply(ans, 10, function(x, y) {corr(x,y)})
data.table::frollapply(ans, 10, function(x, y) {cor(x,y)})
data.table::frollapply(ans, 10, function(ans) {cor(ans$x,ans$y)})
ans$x
data.table::frollapply(ans, 10, function(ans) {cor(as.numeric(ans$x),as,numberic(ans$y))})
data.table::frollapply(ans, 10, function(ans) {cor(as.numeric(ans$x),as.numeric(ans$y))})
data.table::frollapply(ans, 10, function(ans) {cor(x,y)})
?data.table::frollapply
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2)
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2)
ans
ans$x
ans$y
length(ans$x)
length(ans$y)
length(ans$y)- 248
ans$y[1:248]
cor(ans$x, ans$y[1:(length(ans$x)-1)])
ans$y[1:(length(ans$x)-1)]
ans$y[1:(length(ans$x))]
cor(ans$x, ans$y[1:(length(ans$x))])
?cor
cor(ans$x, ans$y[1:(length(ans$x))], use="pairwise.complete.obs")
cor(ans$x, ans$y[2:(length(ans$x))], use="pairwise.complete.obs")
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2)
ans
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2)
ans
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[51:200, 1:5]
p2 <- pems.1[103:250, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
ans <- cAlign(~conc.co, p1, p2, output=c("offset"))
ans
p1 <- pems.1[1:300, 1:5]
p2 <- pems.1[103:250, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[1:1000, 1:5]
p2 <- pems.1[103:1000, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
cor(1:10, rep(1, 10))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
cor(1:10, rep(1, 10))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p1 <- pems.1[1:500, 1:5]
p2 <- pems.1[600:1000, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
p2 <- pems.1[400:1000, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$conc.co, ans$conc.co2.1)
plot(ans$time.stamp, ans$conc.co)
plot(ans$time.stamp, ans$conc.co, type="l")
points(ans$time.stamp, ans$conc.co.1)
plot(ans$time.stamp, ans$conc.co, type="l")
lines(ans$time.stamp, ans$conc.co.1, col="red")
p1 <- pems.1[1:1000, 1:5]
p2 <- pems.1[200:950, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$time.stamp, ans$conc.co, type="l")
lines(ans$time.stamp, ans$conc.co.1, col="red")
dim(pems.1)
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$time.stamp, ans$conc.co, type="l")
lines(ans$time.stamp, ans$conc.co.1, col="red")
p2 <- pems.1[200:1000, 1:5]
p1 <- pems.1[1:9000, 1:5]
p1 <- pems.1[1:900, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
devtools::load_all()
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$time.stamp, ans$conc.co, type="l")
lines(ans$time.stamp, ans$conc.co.1, col="red")
p1 <- pems.1[200:1000, 1:5]
p2 <- pems.1[1:900, 1:5]
ans <- cAlign(~conc.co, p1, p2, output=c("offset","plot", "pems"))
plot(ans$time.stamp, ans$conc.co, type="l")
lines(ans$time.stamp, ans$conc.co.1, col="red")
ans
ans$local.time
ans$local.time.1
plot(ans$local.time)
points(ans$local.time.1)
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.6.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::unload()
devtools::build()
install.packages("~/pkg/pems.utils/pems.utils_0.3.0.6.tar.gz", repos = NULL, type = "source")
devtools::check()
